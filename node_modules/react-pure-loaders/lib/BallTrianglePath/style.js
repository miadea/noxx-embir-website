"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const glamor_1 = require("glamor");
const mixins_1 = require("../mixins");
const variables_1 = require("../variables");
const amount = '50px';
const ballTrianglePath1 = glamor_1.keyframes({
    '100%': {
        transform: 'translate(0px, 0px)',
    },
    '33%': {
        transform: `translate(${parseInt(amount, 10) / 2}px, -${amount})`,
    },
    '66%': {
        transform: `translate(${amount}, 0px)`,
    },
});
const ballTrianglePath2 = glamor_1.keyframes({
    '100%': {
        transform: 'translate(0px, 0px)',
    },
    '33%': {
        transform: `translate(${parseInt(amount, 10) / 2}px, ${amount})`,
    },
    '66%': {
        transform: `translate(-${parseInt(amount, 10) / 2}px, ${amount})`,
    },
});
const ballTrianglePath3 = glamor_1.keyframes({
    '100%': {
        transform: 'translate(0px, 0px)',
    },
    '33%': {
        transform: `translate(-${amount}, 0px)`,
    },
    '66%': {
        transform: `translate(-${parseInt(amount, 10) / 2}px, -${amount})`,
    },
});
function ballTrianglePath() {
    const animations = [ballTrianglePath1, ballTrianglePath2, ballTrianglePath3];
    let i = 1;
    const grid = {};
    for (; i < 4; i += 1) {
        grid[`> div:nth-child(${i})`] = {
            animationDelay: 0,
            animationDuration: '2s',
            animationIterationCount: 'infinite',
            animationName: animations[i - 1],
            animationTimingFunction: 'ease-in-out',
        };
    }
    return grid;
}
exports.default = (color) => glamor_1.css(ballTrianglePath(), {
    ' > div': mixins_1.balls(color),
}, {
    ' > div': mixins_1.globalAnimation(),
}, {
    position: 'relative',
    transform: `translate(-${parseInt(amount, 10) / 1.667}px, -${parseInt(amount, 10) / 1.333}px)`,
    ' > div': {
        border: `1px solid ${color ? color : variables_1.PRIMARY_COLOR}`,
        borderRadius: '100%',
        height: '10px',
        position: 'absolute',
        width: '10px',
        '&:nth-of-type(1)': {
            top: amount,
        },
        '&:nth-of-type(2)': {
            left: `${parseInt(amount, 10) / 2}px`,
        },
        '&:nth-of-type(3)': {
            left: amount,
            top: amount,
        },
    },
});
//# sourceMappingURL=style.js.map